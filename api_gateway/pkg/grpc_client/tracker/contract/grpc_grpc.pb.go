// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: pkg/grpc_client/tracker/contract/grpc.proto

package contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrackerService_HealthCheck_FullMethodName   = "/trackerservice.TrackerService/HealthCheck"
	TrackerService_CreateTracker_FullMethodName = "/trackerservice.TrackerService/CreateTracker"
	TrackerService_UpdateTracker_FullMethodName = "/trackerservice.TrackerService/UpdateTracker"
	TrackerService_ListTracker_FullMethodName   = "/trackerservice.TrackerService/ListTracker"
	TrackerService_DetailTracker_FullMethodName = "/trackerservice.TrackerService/DetailTracker"
	TrackerService_DeleteTracker_FullMethodName = "/trackerservice.TrackerService/DeleteTracker"
)

// TrackerServiceClient is the client API for TrackerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackerServiceClient interface {
	HealthCheck(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	CreateTracker(ctx context.Context, in *CreateTrackerReq, opts ...grpc.CallOption) (*CreateTrackerResponse, error)
	UpdateTracker(ctx context.Context, in *UpdateTrackerReq, opts ...grpc.CallOption) (*DefaultResponse, error)
	ListTracker(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListTrackerResponse, error)
	DetailTracker(ctx context.Context, in *IDTrackerReq, opts ...grpc.CallOption) (*DetailTrackerResponse, error)
	DeleteTracker(ctx context.Context, in *IDTrackerReq, opts ...grpc.CallOption) (*DefaultResponse, error)
}

type trackerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerServiceClient(cc grpc.ClientConnInterface) TrackerServiceClient {
	return &trackerServiceClient{cc}
}

func (c *trackerServiceClient) HealthCheck(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, TrackerService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) CreateTracker(ctx context.Context, in *CreateTrackerReq, opts ...grpc.CallOption) (*CreateTrackerResponse, error) {
	out := new(CreateTrackerResponse)
	err := c.cc.Invoke(ctx, TrackerService_CreateTracker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) UpdateTracker(ctx context.Context, in *UpdateTrackerReq, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, TrackerService_UpdateTracker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) ListTracker(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListTrackerResponse, error) {
	out := new(ListTrackerResponse)
	err := c.cc.Invoke(ctx, TrackerService_ListTracker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) DetailTracker(ctx context.Context, in *IDTrackerReq, opts ...grpc.CallOption) (*DetailTrackerResponse, error) {
	out := new(DetailTrackerResponse)
	err := c.cc.Invoke(ctx, TrackerService_DetailTracker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) DeleteTracker(ctx context.Context, in *IDTrackerReq, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, TrackerService_DeleteTracker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerServiceServer is the server API for TrackerService service.
// All implementations must embed UnimplementedTrackerServiceServer
// for forward compatibility
type TrackerServiceServer interface {
	HealthCheck(context.Context, *EmptyRequest) (*DefaultResponse, error)
	CreateTracker(context.Context, *CreateTrackerReq) (*CreateTrackerResponse, error)
	UpdateTracker(context.Context, *UpdateTrackerReq) (*DefaultResponse, error)
	ListTracker(context.Context, *EmptyRequest) (*ListTrackerResponse, error)
	DetailTracker(context.Context, *IDTrackerReq) (*DetailTrackerResponse, error)
	DeleteTracker(context.Context, *IDTrackerReq) (*DefaultResponse, error)
	mustEmbedUnimplementedTrackerServiceServer()
}

// UnimplementedTrackerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrackerServiceServer struct {
}

func (UnimplementedTrackerServiceServer) HealthCheck(context.Context, *EmptyRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedTrackerServiceServer) CreateTracker(context.Context, *CreateTrackerReq) (*CreateTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTracker not implemented")
}
func (UnimplementedTrackerServiceServer) UpdateTracker(context.Context, *UpdateTrackerReq) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTracker not implemented")
}
func (UnimplementedTrackerServiceServer) ListTracker(context.Context, *EmptyRequest) (*ListTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTracker not implemented")
}
func (UnimplementedTrackerServiceServer) DetailTracker(context.Context, *IDTrackerReq) (*DetailTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailTracker not implemented")
}
func (UnimplementedTrackerServiceServer) DeleteTracker(context.Context, *IDTrackerReq) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTracker not implemented")
}
func (UnimplementedTrackerServiceServer) mustEmbedUnimplementedTrackerServiceServer() {}

// UnsafeTrackerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackerServiceServer will
// result in compilation errors.
type UnsafeTrackerServiceServer interface {
	mustEmbedUnimplementedTrackerServiceServer()
}

func RegisterTrackerServiceServer(s grpc.ServiceRegistrar, srv TrackerServiceServer) {
	s.RegisterService(&TrackerService_ServiceDesc, srv)
}

func _TrackerService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).HealthCheck(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_CreateTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrackerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).CreateTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_CreateTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).CreateTracker(ctx, req.(*CreateTrackerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_UpdateTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrackerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).UpdateTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_UpdateTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).UpdateTracker(ctx, req.(*UpdateTrackerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_ListTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).ListTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_ListTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).ListTracker(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_DetailTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDTrackerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).DetailTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_DetailTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).DetailTracker(ctx, req.(*IDTrackerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_DeleteTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDTrackerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).DeleteTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_DeleteTracker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).DeleteTracker(ctx, req.(*IDTrackerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackerService_ServiceDesc is the grpc.ServiceDesc for TrackerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trackerservice.TrackerService",
	HandlerType: (*TrackerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _TrackerService_HealthCheck_Handler,
		},
		{
			MethodName: "CreateTracker",
			Handler:    _TrackerService_CreateTracker_Handler,
		},
		{
			MethodName: "UpdateTracker",
			Handler:    _TrackerService_UpdateTracker_Handler,
		},
		{
			MethodName: "ListTracker",
			Handler:    _TrackerService_ListTracker_Handler,
		},
		{
			MethodName: "DetailTracker",
			Handler:    _TrackerService_DetailTracker_Handler,
		},
		{
			MethodName: "DeleteTracker",
			Handler:    _TrackerService_DeleteTracker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc_client/tracker/contract/grpc.proto",
}
