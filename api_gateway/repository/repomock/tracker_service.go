// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/repo_interface/tracker_service.go
//
// Generated by this command:
//
//	mockgen.exe -source ./repository/repo_interface/tracker_service.go -destination ./repository/repomock/tracker_service.go -package repomock echo tracker_service.go
//
// Package repomock is a generated GoMock package.
package repomock

import (
	context "context"
	reflect "reflect"

	contract "github.com/aksan/weplus/apigw/pkg/grpc_client/tracker/contract"
	gomock "go.uber.org/mock/gomock"
)

// MockTrackerServiceIface is a mock of TrackerServiceIface interface.
type MockTrackerServiceIface struct {
	ctrl     *gomock.Controller
	recorder *MockTrackerServiceIfaceMockRecorder
}

// MockTrackerServiceIfaceMockRecorder is the mock recorder for MockTrackerServiceIface.
type MockTrackerServiceIfaceMockRecorder struct {
	mock *MockTrackerServiceIface
}

// NewMockTrackerServiceIface creates a new mock instance.
func NewMockTrackerServiceIface(ctrl *gomock.Controller) *MockTrackerServiceIface {
	mock := &MockTrackerServiceIface{ctrl: ctrl}
	mock.recorder = &MockTrackerServiceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackerServiceIface) EXPECT() *MockTrackerServiceIfaceMockRecorder {
	return m.recorder
}

// CreateTracker mocks base method.
func (m *MockTrackerServiceIface) CreateTracker(arg0 context.Context, arg1 *contract.CreateTrackerReq) (*contract.CreateTrackerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTracker", arg0, arg1)
	ret0, _ := ret[0].(*contract.CreateTrackerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTracker indicates an expected call of CreateTracker.
func (mr *MockTrackerServiceIfaceMockRecorder) CreateTracker(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTracker", reflect.TypeOf((*MockTrackerServiceIface)(nil).CreateTracker), arg0, arg1)
}

// DeleteTracker mocks base method.
func (m *MockTrackerServiceIface) DeleteTracker(arg0 context.Context, arg1 *contract.IDTrackerReq) (*contract.DefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTracker", arg0, arg1)
	ret0, _ := ret[0].(*contract.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTracker indicates an expected call of DeleteTracker.
func (mr *MockTrackerServiceIfaceMockRecorder) DeleteTracker(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTracker", reflect.TypeOf((*MockTrackerServiceIface)(nil).DeleteTracker), arg0, arg1)
}

// DetailTracker mocks base method.
func (m *MockTrackerServiceIface) DetailTracker(arg0 context.Context, arg1 *contract.IDTrackerReq) (*contract.DetailTrackerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailTracker", arg0, arg1)
	ret0, _ := ret[0].(*contract.DetailTrackerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailTracker indicates an expected call of DetailTracker.
func (mr *MockTrackerServiceIfaceMockRecorder) DetailTracker(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailTracker", reflect.TypeOf((*MockTrackerServiceIface)(nil).DetailTracker), arg0, arg1)
}

// HealthCheck mocks base method.
func (m *MockTrackerServiceIface) HealthCheck(arg0 context.Context, arg1 *contract.EmptyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockTrackerServiceIfaceMockRecorder) HealthCheck(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockTrackerServiceIface)(nil).HealthCheck), arg0, arg1)
}

// ListTracker mocks base method.
func (m *MockTrackerServiceIface) ListTracker(arg0 context.Context, arg1 *contract.EmptyRequest) (*contract.ListTrackerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTracker", arg0, arg1)
	ret0, _ := ret[0].(*contract.ListTrackerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTracker indicates an expected call of ListTracker.
func (mr *MockTrackerServiceIfaceMockRecorder) ListTracker(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTracker", reflect.TypeOf((*MockTrackerServiceIface)(nil).ListTracker), arg0, arg1)
}

// UpdateTracker mocks base method.
func (m *MockTrackerServiceIface) UpdateTracker(arg0 context.Context, arg1 *contract.UpdateTrackerReq) (*contract.DefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTracker", arg0, arg1)
	ret0, _ := ret[0].(*contract.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTracker indicates an expected call of UpdateTracker.
func (mr *MockTrackerServiceIfaceMockRecorder) UpdateTracker(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTracker", reflect.TypeOf((*MockTrackerServiceIface)(nil).UpdateTracker), arg0, arg1)
}
