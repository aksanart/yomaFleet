// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/repo_interface/redis_iface.go
//
// Generated by this command:
//
//	mockgen.exe -source ./repository/repo_interface/redis_iface.go -destination ./repository/repomock/redis_iface.go -package repomock echo redis_iface.go
//
// Package repomock is a generated GoMock package.
package repomock

import (
	context "context"
	reflect "reflect"
	time "time"

	redis "github.com/go-redis/redis/v8"
	gomock "go.uber.org/mock/gomock"
)

// MockRedisInterface is a mock of RedisInterface interface.
type MockRedisInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRedisInterfaceMockRecorder
}

// MockRedisInterfaceMockRecorder is the mock recorder for MockRedisInterface.
type MockRedisInterfaceMockRecorder struct {
	mock *MockRedisInterface
}

// NewMockRedisInterface creates a new mock instance.
func NewMockRedisInterface(ctrl *gomock.Controller) *MockRedisInterface {
	mock := &MockRedisInterface{ctrl: ctrl}
	mock.recorder = &MockRedisInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisInterface) EXPECT() *MockRedisInterfaceMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockRedisInterface) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockRedisInterfaceMockRecorder) Del(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockRedisInterface)(nil).Del), ctx, key)
}

// Get mocks base method.
func (m *MockRedisInterface) Get(ctx context.Context, key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRedisInterfaceMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisInterface)(nil).Get), ctx, key)
}

// GetData mocks base method.
func (m *MockRedisInterface) GetData(ctx context.Context, key string, pointerData any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", ctx, key, pointerData)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetData indicates an expected call of GetData.
func (mr *MockRedisInterfaceMockRecorder) GetData(ctx, key, pointerData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockRedisInterface)(nil).GetData), ctx, key, pointerData)
}

// GetStreamClient mocks base method.
func (m *MockRedisInterface) GetStreamClient(ctx context.Context, streamName string) ([]redis.XStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamClient", ctx, streamName)
	ret0, _ := ret[0].([]redis.XStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamClient indicates an expected call of GetStreamClient.
func (mr *MockRedisInterfaceMockRecorder) GetStreamClient(ctx, streamName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamClient", reflect.TypeOf((*MockRedisInterface)(nil).GetStreamClient), ctx, streamName)
}

// RangeData mocks base method.
func (m *MockRedisInterface) RangeData(ctx context.Context, streamName string) ([]redis.XMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeData", ctx, streamName)
	ret0, _ := ret[0].([]redis.XMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeData indicates an expected call of RangeData.
func (mr *MockRedisInterfaceMockRecorder) RangeData(ctx, streamName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeData", reflect.TypeOf((*MockRedisInterface)(nil).RangeData), ctx, streamName)
}

// Set mocks base method.
func (m *MockRedisInterface) Set(ctx context.Context, key string, data []byte, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, data, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisInterfaceMockRecorder) Set(ctx, key, data, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisInterface)(nil).Set), ctx, key, data, ttl)
}

// SetStreamData mocks base method.
func (m *MockRedisInterface) SetStreamData(ctx context.Context, key string, values any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStreamData", ctx, key, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStreamData indicates an expected call of SetStreamData.
func (mr *MockRedisInterfaceMockRecorder) SetStreamData(ctx, key, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStreamData", reflect.TypeOf((*MockRedisInterface)(nil).SetStreamData), ctx, key, values)
}
