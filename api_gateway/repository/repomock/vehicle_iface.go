// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/repo_interface/vehicle_iface.go
//
// Generated by this command:
//
//	mockgen.exe -source ./repository/repo_interface/vehicle_iface.go -destination ./repository/repomock/vehicle_iface.go -package repomock echo vehicle_iface.go
//
// Package repomock is a generated GoMock package.
package repomock

import (
	context "context"
	reflect "reflect"

	contract "github.com/aksan/weplus/apigw/pkg/grpc_client/vehicle/contract"
	gomock "go.uber.org/mock/gomock"
)

// MockVehicleServiceIface is a mock of VehicleServiceIface interface.
type MockVehicleServiceIface struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleServiceIfaceMockRecorder
}

// MockVehicleServiceIfaceMockRecorder is the mock recorder for MockVehicleServiceIface.
type MockVehicleServiceIfaceMockRecorder struct {
	mock *MockVehicleServiceIface
}

// NewMockVehicleServiceIface creates a new mock instance.
func NewMockVehicleServiceIface(ctrl *gomock.Controller) *MockVehicleServiceIface {
	mock := &MockVehicleServiceIface{ctrl: ctrl}
	mock.recorder = &MockVehicleServiceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicleServiceIface) EXPECT() *MockVehicleServiceIfaceMockRecorder {
	return m.recorder
}

// CreateVehicle mocks base method.
func (m *MockVehicleServiceIface) CreateVehicle(arg0 context.Context, arg1 *contract.CreateVehicleReq) (*contract.CreateVehicleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVehicle", arg0, arg1)
	ret0, _ := ret[0].(*contract.CreateVehicleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVehicle indicates an expected call of CreateVehicle.
func (mr *MockVehicleServiceIfaceMockRecorder) CreateVehicle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVehicle", reflect.TypeOf((*MockVehicleServiceIface)(nil).CreateVehicle), arg0, arg1)
}

// DeleteVehicle mocks base method.
func (m *MockVehicleServiceIface) DeleteVehicle(arg0 context.Context, arg1 *contract.IDVehicleReq) (*contract.DefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVehicle", arg0, arg1)
	ret0, _ := ret[0].(*contract.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVehicle indicates an expected call of DeleteVehicle.
func (mr *MockVehicleServiceIfaceMockRecorder) DeleteVehicle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVehicle", reflect.TypeOf((*MockVehicleServiceIface)(nil).DeleteVehicle), arg0, arg1)
}

// DetailVehicle mocks base method.
func (m *MockVehicleServiceIface) DetailVehicle(arg0 context.Context, arg1 *contract.IDVehicleReq) (*contract.DetailVehicleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailVehicle", arg0, arg1)
	ret0, _ := ret[0].(*contract.DetailVehicleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailVehicle indicates an expected call of DetailVehicle.
func (mr *MockVehicleServiceIfaceMockRecorder) DetailVehicle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailVehicle", reflect.TypeOf((*MockVehicleServiceIface)(nil).DetailVehicle), arg0, arg1)
}

// HealthCheck mocks base method.
func (m *MockVehicleServiceIface) HealthCheck(arg0 context.Context, arg1 *contract.EmptyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockVehicleServiceIfaceMockRecorder) HealthCheck(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockVehicleServiceIface)(nil).HealthCheck), arg0, arg1)
}

// ListVehicle mocks base method.
func (m *MockVehicleServiceIface) ListVehicle(arg0 context.Context, arg1 *contract.ListVehicleReq) (*contract.ListVehicleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVehicle", arg0, arg1)
	ret0, _ := ret[0].(*contract.ListVehicleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVehicle indicates an expected call of ListVehicle.
func (mr *MockVehicleServiceIfaceMockRecorder) ListVehicle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVehicle", reflect.TypeOf((*MockVehicleServiceIface)(nil).ListVehicle), arg0, arg1)
}

// UpdateVehicle mocks base method.
func (m *MockVehicleServiceIface) UpdateVehicle(arg0 context.Context, arg1 *contract.UpdateVehicleReq) (*contract.DefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVehicle", arg0, arg1)
	ret0, _ := ret[0].(*contract.DefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVehicle indicates an expected call of UpdateVehicle.
func (mr *MockVehicleServiceIfaceMockRecorder) UpdateVehicle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVehicle", reflect.TypeOf((*MockVehicleServiceIface)(nil).UpdateVehicle), arg0, arg1)
}
