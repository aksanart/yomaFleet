// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/repo_interface/mongo_iface.go
//
// Generated by this command:
//
//	mockgen.exe -source ./repository/repo_interface/mongo_iface.go -destination ./repository/repomock/mongo_iface.go -package repomock echo mongo_iface.go
//
// Package repomock is a generated GoMock package.
package repomock

import (
	context "context"
	reflect "reflect"

	model "github.com/aksan/weplus/apigw/model"
	gomock "go.uber.org/mock/gomock"
)

// MockMongoInterface is a mock of MongoInterface interface.
type MockMongoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMongoInterfaceMockRecorder
}

// MockMongoInterfaceMockRecorder is the mock recorder for MockMongoInterface.
type MockMongoInterfaceMockRecorder struct {
	mock *MockMongoInterface
}

// NewMockMongoInterface creates a new mock instance.
func NewMockMongoInterface(ctrl *gomock.Controller) *MockMongoInterface {
	mock := &MockMongoInterface{ctrl: ctrl}
	mock.recorder = &MockMongoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoInterface) EXPECT() *MockMongoInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMongoInterface) Create(ctx context.Context, data *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMongoInterfaceMockRecorder) Create(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMongoInterface)(nil).Create), ctx, data)
}

// Delete mocks base method.
func (m *MockMongoInterface) Delete(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMongoInterfaceMockRecorder) Delete(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMongoInterface)(nil).Delete), ctx, email)
}

// FindByEmail mocks base method.
func (m *MockMongoInterface) FindByEmail(ctx context.Context, email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockMongoInterfaceMockRecorder) FindByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockMongoInterface)(nil).FindByEmail), ctx, email)
}

// HealthCheck mocks base method.
func (m *MockMongoInterface) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockMongoInterfaceMockRecorder) HealthCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockMongoInterface)(nil).HealthCheck), ctx)
}

// Update mocks base method.
func (m *MockMongoInterface) Update(ctx context.Context, email string, data *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, email, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMongoInterfaceMockRecorder) Update(ctx, email, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMongoInterface)(nil).Update), ctx, email, data)
}
