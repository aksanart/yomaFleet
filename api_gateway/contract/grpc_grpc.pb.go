// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: contract/grpc.proto

package contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApiGateway_HealthCheck_FullMethodName            = "/apigateway.ApiGateway/HealthCheck"
	ApiGateway_Register_FullMethodName               = "/apigateway.ApiGateway/Register"
	ApiGateway_Login_FullMethodName                  = "/apigateway.ApiGateway/Login"
	ApiGateway_ListVehicle_FullMethodName            = "/apigateway.ApiGateway/ListVehicle"
	ApiGateway_HistoryLocationVehicle_FullMethodName = "/apigateway.ApiGateway/HistoryLocationVehicle"
	ApiGateway_CreateVehicle_FullMethodName          = "/apigateway.ApiGateway/CreateVehicle"
	ApiGateway_UpdateVehicle_FullMethodName          = "/apigateway.ApiGateway/UpdateVehicle"
	ApiGateway_DeleteVehicle_FullMethodName          = "/apigateway.ApiGateway/DeleteVehicle"
	ApiGateway_LiveTrackingOne_FullMethodName        = "/apigateway.ApiGateway/LiveTrackingOne"
)

// ApiGatewayClient is the client API for ApiGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiGatewayClient interface {
	HealthCheck(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	// user
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*DefaultResponse, error)
	Login(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginResponse, error)
	// vehicle
	ListVehicle(ctx context.Context, in *ListVehicleReq, opts ...grpc.CallOption) (*ListVehicleResponse, error)
	HistoryLocationVehicle(ctx context.Context, in *HistoryLocationVehicleReq, opts ...grpc.CallOption) (*HistoryLocationVehicleResponse, error)
	CreateVehicle(ctx context.Context, in *CreateVehicleReq, opts ...grpc.CallOption) (*DefaultResponse, error)
	UpdateVehicle(ctx context.Context, in *UpdateVehicleReq, opts ...grpc.CallOption) (*DefaultResponse, error)
	DeleteVehicle(ctx context.Context, in *IDVehicleReq, opts ...grpc.CallOption) (*DefaultResponse, error)
	LiveTrackingOne(ctx context.Context, in *LiveTrackingOneReq, opts ...grpc.CallOption) (ApiGateway_LiveTrackingOneClient, error)
}

type apiGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewApiGatewayClient(cc grpc.ClientConnInterface) ApiGatewayClient {
	return &apiGatewayClient{cc}
}

func (c *apiGatewayClient) HealthCheck(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, ApiGateway_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, ApiGateway_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) Login(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, ApiGateway_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) ListVehicle(ctx context.Context, in *ListVehicleReq, opts ...grpc.CallOption) (*ListVehicleResponse, error) {
	out := new(ListVehicleResponse)
	err := c.cc.Invoke(ctx, ApiGateway_ListVehicle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) HistoryLocationVehicle(ctx context.Context, in *HistoryLocationVehicleReq, opts ...grpc.CallOption) (*HistoryLocationVehicleResponse, error) {
	out := new(HistoryLocationVehicleResponse)
	err := c.cc.Invoke(ctx, ApiGateway_HistoryLocationVehicle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) CreateVehicle(ctx context.Context, in *CreateVehicleReq, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, ApiGateway_CreateVehicle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) UpdateVehicle(ctx context.Context, in *UpdateVehicleReq, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, ApiGateway_UpdateVehicle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) DeleteVehicle(ctx context.Context, in *IDVehicleReq, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, ApiGateway_DeleteVehicle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) LiveTrackingOne(ctx context.Context, in *LiveTrackingOneReq, opts ...grpc.CallOption) (ApiGateway_LiveTrackingOneClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiGateway_ServiceDesc.Streams[0], ApiGateway_LiveTrackingOne_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &apiGatewayLiveTrackingOneClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiGateway_LiveTrackingOneClient interface {
	Recv() (*LiveTrackingOneResp, error)
	grpc.ClientStream
}

type apiGatewayLiveTrackingOneClient struct {
	grpc.ClientStream
}

func (x *apiGatewayLiveTrackingOneClient) Recv() (*LiveTrackingOneResp, error) {
	m := new(LiveTrackingOneResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiGatewayServer is the server API for ApiGateway service.
// All implementations must embed UnimplementedApiGatewayServer
// for forward compatibility
type ApiGatewayServer interface {
	HealthCheck(context.Context, *EmptyRequest) (*DefaultResponse, error)
	// user
	Register(context.Context, *RegisterReq) (*DefaultResponse, error)
	Login(context.Context, *RegisterReq) (*LoginResponse, error)
	// vehicle
	ListVehicle(context.Context, *ListVehicleReq) (*ListVehicleResponse, error)
	HistoryLocationVehicle(context.Context, *HistoryLocationVehicleReq) (*HistoryLocationVehicleResponse, error)
	CreateVehicle(context.Context, *CreateVehicleReq) (*DefaultResponse, error)
	UpdateVehicle(context.Context, *UpdateVehicleReq) (*DefaultResponse, error)
	DeleteVehicle(context.Context, *IDVehicleReq) (*DefaultResponse, error)
	LiveTrackingOne(*LiveTrackingOneReq, ApiGateway_LiveTrackingOneServer) error
	mustEmbedUnimplementedApiGatewayServer()
}

// UnimplementedApiGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedApiGatewayServer struct {
}

func (UnimplementedApiGatewayServer) HealthCheck(context.Context, *EmptyRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedApiGatewayServer) Register(context.Context, *RegisterReq) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedApiGatewayServer) Login(context.Context, *RegisterReq) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedApiGatewayServer) ListVehicle(context.Context, *ListVehicleReq) (*ListVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVehicle not implemented")
}
func (UnimplementedApiGatewayServer) HistoryLocationVehicle(context.Context, *HistoryLocationVehicleReq) (*HistoryLocationVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryLocationVehicle not implemented")
}
func (UnimplementedApiGatewayServer) CreateVehicle(context.Context, *CreateVehicleReq) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVehicle not implemented")
}
func (UnimplementedApiGatewayServer) UpdateVehicle(context.Context, *UpdateVehicleReq) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVehicle not implemented")
}
func (UnimplementedApiGatewayServer) DeleteVehicle(context.Context, *IDVehicleReq) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVehicle not implemented")
}
func (UnimplementedApiGatewayServer) LiveTrackingOne(*LiveTrackingOneReq, ApiGateway_LiveTrackingOneServer) error {
	return status.Errorf(codes.Unimplemented, "method LiveTrackingOne not implemented")
}
func (UnimplementedApiGatewayServer) mustEmbedUnimplementedApiGatewayServer() {}

// UnsafeApiGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiGatewayServer will
// result in compilation errors.
type UnsafeApiGatewayServer interface {
	mustEmbedUnimplementedApiGatewayServer()
}

func RegisterApiGatewayServer(s grpc.ServiceRegistrar, srv ApiGatewayServer) {
	s.RegisterService(&ApiGateway_ServiceDesc, srv)
}

func _ApiGateway_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).HealthCheck(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).Login(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_ListVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVehicleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).ListVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_ListVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).ListVehicle(ctx, req.(*ListVehicleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_HistoryLocationVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryLocationVehicleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).HistoryLocationVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_HistoryLocationVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).HistoryLocationVehicle(ctx, req.(*HistoryLocationVehicleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_CreateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVehicleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).CreateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_CreateVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).CreateVehicle(ctx, req.(*CreateVehicleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_UpdateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVehicleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).UpdateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_UpdateVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).UpdateVehicle(ctx, req.(*UpdateVehicleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_DeleteVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDVehicleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).DeleteVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGateway_DeleteVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).DeleteVehicle(ctx, req.(*IDVehicleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_LiveTrackingOne_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LiveTrackingOneReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiGatewayServer).LiveTrackingOne(m, &apiGatewayLiveTrackingOneServer{stream})
}

type ApiGateway_LiveTrackingOneServer interface {
	Send(*LiveTrackingOneResp) error
	grpc.ServerStream
}

type apiGatewayLiveTrackingOneServer struct {
	grpc.ServerStream
}

func (x *apiGatewayLiveTrackingOneServer) Send(m *LiveTrackingOneResp) error {
	return x.ServerStream.SendMsg(m)
}

// ApiGateway_ServiceDesc is the grpc.ServiceDesc for ApiGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apigateway.ApiGateway",
	HandlerType: (*ApiGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ApiGateway_HealthCheck_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ApiGateway_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ApiGateway_Login_Handler,
		},
		{
			MethodName: "ListVehicle",
			Handler:    _ApiGateway_ListVehicle_Handler,
		},
		{
			MethodName: "HistoryLocationVehicle",
			Handler:    _ApiGateway_HistoryLocationVehicle_Handler,
		},
		{
			MethodName: "CreateVehicle",
			Handler:    _ApiGateway_CreateVehicle_Handler,
		},
		{
			MethodName: "UpdateVehicle",
			Handler:    _ApiGateway_UpdateVehicle_Handler,
		},
		{
			MethodName: "DeleteVehicle",
			Handler:    _ApiGateway_DeleteVehicle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LiveTrackingOne",
			Handler:       _ApiGateway_LiveTrackingOne_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "contract/grpc.proto",
}
